
R version 2.10.1 (2009-12-14)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( micEconCES )
Loading required package: systemfit
Loading required package: Matrix
Loading required package: lattice
Loading required package: car
Loading required package: lmtest
Loading required package: zoo
Loading required package: miscTools
Loading required package: micEcon
Loading required package: np
Loading required package: boot

Attaching package: 'boot'


	The following object(s) are masked from package:car :

	 logit 


	The following object(s) are masked from package:lattice :

	 melanoma 

Nonparametric Kernel Methods for Mixed Datatypes (version 0.30-3)
> 
> # load data
> data( germanFarms )
> # output quantity:
> germanFarms$qOutput <- germanFarms$vOutput / germanFarms$pOutput
> # quantity of intermediate inputs
> germanFarms$qVarInput <- germanFarms$vVarInput / germanFarms$pVarInput
> 
> 
> ## CES: Land & Labor
> cesLandLabor <- cesEst( "qOutput", c( "land", "qLabor" ), germanFarms )
> print.default( cesLandLabor ) 
$par
    gamma     alpha       rho 
41.302277  2.740694  5.802162 

$value
[1] 165832.5

$counts
function gradient 
      62       NA 

$convergence
[1] 0

$message
NULL

$hessian
          gamma     alpha        rho
gamma  48696.25  126472.8  -60230.83
alpha 126472.77  328586.3 -156392.12
rho   -60230.83 -156392.1   74457.55

$vcov
      gamma alpha rho
gamma    NA    NA  NA
alpha    NA    NA  NA
rho      NA    NA  NA

$call
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms)

$method
[1] "Nelder-Mead"

$fitted.values
 [1] 1149.886 1189.199 1213.277 1224.088 1224.088 1239.813 1273.229 1276.177
 [9] 1237.356 1281.091 1315.490 1467.825 1528.759 1581.831 1548.907 1566.597
[17] 1648.170 1722.864 1833.430 1935.642

attr(,"class")
[1] "cesEst" "list"  
> print( cesLandLabor )
Estimated CES function

Call:
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms)

Coefficients:
 gamma  alpha    rho 
41.302  2.741  5.802 

> summary( cesLandLabor )
Estimated CES function with constant returns to scale

Call:
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms)

Estimation method:  Nelder-Mead 

Coefficients:
      Estimate Std. Error t value Pr(>|t|)
gamma   41.302         NA      NA       NA
alpha    2.741         NA      NA       NA
rho      5.802         NA      NA       NA

> coef( cesLandLabor ) 
    gamma     alpha       rho 
41.302277  2.740694  5.802162 
> vcov( cesLandLabor ) 
      gamma alpha rho
gamma    NA    NA  NA
alpha    NA    NA  NA
rho      NA    NA  NA
> coef( summary( cesLandLabor ) )
       Estimate Std. Error t value Pr(>|t|)
gamma 41.302277         NA      NA       NA
alpha  2.740694         NA      NA       NA
rho    5.802162         NA      NA       NA
> 
> # variable returns to scale
> cesLandLaborVrs <- cesEst( "qOutput", c( "land", "qLabor" ), germanFarms,
+    vrs = TRUE )
> print.default( cesLandLaborVrs )
$par
    gamma     alpha       rho       phi 
19.649459  2.999448 17.175560  1.245646 

$value
[1] 97679.9

$counts
function gradient 
     191       NA 

$convergence
[1] 0

$message
NULL

$hessian
            gamma       alpha          rho        phi
gamma   215525.87  102398.274   -19642.408   14743188
alpha   102398.27   48649.741    -9332.375    7004646
rho     -19642.41   -9332.375     1790.189   -1343657
phi   14743188.41 7004645.884 -1343656.561 1010787434

$vcov
      gamma alpha rho phi
gamma    NA    NA  NA  NA
alpha    NA    NA  NA  NA
rho      NA    NA  NA  NA
phi      NA    NA  NA  NA

$call
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms, 
    vrs = TRUE)

$method
[1] "Nelder-Mead"

$fitted.values
 [1] 1080.203 1126.396 1154.876 1167.708 1167.708 1186.423 1226.386 1229.924
 [9] 1183.495 1235.826 1277.296 1464.090 1540.181 1607.065 1565.507 1587.810
[17] 1691.447 1787.457 1931.456 2066.489

attr(,"class")
[1] "cesEst" "list"  
> print( cesLandLaborVrs )
Estimated CES function

Call:
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms, 
    vrs = TRUE)

Coefficients:
 gamma  alpha    rho    phi 
19.649  2.999 17.176  1.246 

> summary( cesLandLaborVrs )
Estimated CES function with variable returns to scale

Call:
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms, 
    vrs = TRUE)

Estimation method:  Nelder-Mead 

Coefficients:
      Estimate Std. Error t value Pr(>|t|)
gamma   19.649         NA      NA       NA
alpha    2.999         NA      NA       NA
rho     17.176         NA      NA       NA
phi      1.246         NA      NA       NA

> coef( cesLandLaborVrs )
    gamma     alpha       rho       phi 
19.649459  2.999448 17.175560  1.245646 
> vcov( cesLandLaborVrs )
      gamma alpha rho phi
gamma    NA    NA  NA  NA
alpha    NA    NA  NA  NA
rho      NA    NA  NA  NA
phi      NA    NA  NA  NA
> coef( summary( cesLandLaborVrs ) )
       Estimate Std. Error t value Pr(>|t|)
gamma 19.649459         NA      NA       NA
alpha  2.999448         NA      NA       NA
rho   17.175560         NA      NA       NA
phi    1.245646         NA      NA       NA
> 
> # using the BFGS optimization method
> cesLandLaborBfgs <- cesEst( "qOutput", c( "land", "qLabor" ), germanFarms,
+    method = "BFGS" )
> print.default( cesLandLaborBfgs )
$par
    gamma     alpha       rho 
 47.10913 561.14577 149.76314 

$value
[1] 165832.4

$counts
function gradient 
      31        8 

$convergence
[1] 0

$message
NULL

$hessian
            gamma       alpha          rho
gamma 37434.99411 20.98467607 -497.7089204
alpha    20.98468  0.01176313   -0.2789976
rho    -497.70892 -0.27899764    6.6172004

$vcov
      gamma alpha rho
gamma    NA    NA  NA
alpha    NA    NA  NA
rho      NA    NA  NA

$call
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms, 
    method = "BFGS")

$method
[1] "BFGS"

$fitted.values
 [1] 1149.945 1189.259 1213.340 1224.151 1224.151 1239.877 1273.294 1276.242
 [9] 1237.420 1281.157 1315.557 1467.900 1528.837 1581.912 1548.986 1566.677
[17] 1648.255 1722.952 1833.524 1935.741

attr(,"class")
[1] "cesEst" "list"  
> print( cesLandLaborBfgs )
Estimated CES function

Call:
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms, 
    method = "BFGS")

Coefficients:
 gamma  alpha    rho 
 47.11 561.15 149.76 

> summary( cesLandLaborBfgs )
Estimated CES function with constant returns to scale

Call:
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms, 
    method = "BFGS")

Estimation method:  BFGS 

Coefficients:
      Estimate Std. Error t value Pr(>|t|)
gamma    47.11         NA      NA       NA
alpha   561.15         NA      NA       NA
rho     149.76         NA      NA       NA

> coef( cesLandLaborBfgs )
    gamma     alpha       rho 
 47.10913 561.14577 149.76314 
> vcov( cesLandLaborBfgs )
      gamma alpha rho
gamma    NA    NA  NA
alpha    NA    NA  NA
rho      NA    NA  NA
> coef( summary( cesLandLaborBfgs ) )
       Estimate Std. Error t value Pr(>|t|)
gamma  47.10913         NA      NA       NA
alpha 561.14577         NA      NA       NA
rho   149.76314         NA      NA       NA
> 
> # using the L-BFGS-B optimization method with constrained alpha
> cesLandLaborBfgsCon <- cesEst( "qOutput", c( "land", "qLabor" ),
+    germanFarms, method = "L-BFGS-B", lower = c( -Inf, 0, -Inf ),
+    upper = c( Inf, 1, Inf ) )
> print.default( cesLandLaborBfgsCon )
$par
    gamma     alpha       rho 
49.142950  1.000000  4.610031 

$value
[1] 165832.4

$counts
function gradient 
      20       20 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

$hessian
             gamma        alpha          rho
gamma 3.440056e+04 3.667095e+05 2.957779e-08
alpha 3.667095e+05 3.909125e+06 1.642428e+00
rho   2.957779e-08 1.642428e+00 8.213450e-08

$vcov
      gamma alpha rho
gamma    NA    NA  NA
alpha    NA    NA  NA
rho      NA    NA  NA

$call
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms, 
    method = "L-BFGS-B", lower = c(-Inf, 0, -Inf), upper = c(Inf, 
        1, Inf))

$method
[1] "L-BFGS-B"

$fitted.values
 [1] 1149.945 1189.259 1213.339 1224.151 1224.151 1239.877 1273.294 1276.242
 [9] 1237.419 1281.157 1315.557 1467.900 1528.837 1581.912 1548.986 1566.677
[17] 1648.255 1722.952 1833.523 1935.741

attr(,"class")
[1] "cesEst" "list"  
> print( cesLandLaborBfgsCon )
Estimated CES function

Call:
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms, 
    method = "L-BFGS-B", lower = c(-Inf, 0, -Inf), upper = c(Inf, 
        1, Inf))

Coefficients:
gamma alpha   rho 
49.14  1.00  4.61 

> summary( cesLandLaborBfgsCon )
Estimated CES function with constant returns to scale

Call:
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms, 
    method = "L-BFGS-B", lower = c(-Inf, 0, -Inf), upper = c(Inf, 
        1, Inf))

Estimation method:  L-BFGS-B 

Coefficients:
      Estimate Std. Error t value Pr(>|t|)
gamma    49.14         NA      NA       NA
alpha     1.00         NA      NA       NA
rho       4.61         NA      NA       NA

> coef( cesLandLaborBfgsCon )
    gamma     alpha       rho 
49.142950  1.000000  4.610031 
> vcov( cesLandLaborBfgsCon )
      gamma alpha rho
gamma    NA    NA  NA
alpha    NA    NA  NA
rho      NA    NA  NA
> coef( summary( cesLandLaborBfgsCon ) )
       Estimate Std. Error t value Pr(>|t|)
gamma 49.142950         NA      NA       NA
alpha  1.000000         NA      NA       NA
rho    4.610031         NA      NA       NA
> 
> # Kmenta approximation
> cesLandLaborKmenta <- cesEst( "qOutput", c( "land", "qLabor" ), germanFarms,
+    vrs = TRUE, method = "Kmenta" )
> print.default( cesLandLaborKmenta )
$translogUnr
Estimated Translog function with 20 observations.
        a_0         a_1         a_2       b_1_1       b_1_2       b_2_2 
-16.6619242   6.6736594  47.6852700   0.4633037 -15.5762602  10.3461931 

$test
Linear hypothesis test

Hypothesis:
b_1_1 + b_1_2 = 0
b_1_2 + b_2_2 = 0

Model 1: y ~ 1 + a_1 + a_2 + b_1_1 + b_1_2 + b_2_2
Model 2: restricted model

  Res.Df      RSS Df Sum of Sq      F   Pr(>F)   
1     14 0.015804                                
2     16 0.040974 -2 -0.025170 11.148 0.001270 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

$translog

systemfit results 
method: OLS 

Coefficients:
eq1_(Intercept)         eq1_a_1         eq1_a_2       eq1_b_1_1       eq1_b_1_2 
       -13.5420         12.3860        -10.7303         -3.7741          3.7741 
      eq1_b_2_2 
        -3.7741 

$par
        gamma         alpha           rho           phi 
 1.314540e-06  7.480918e+00 -4.701592e-02  1.655682e+00 

$vcov
              gamma         alpha           rho           phi
gamma  1.960017e-10 -7.277789e-05 -8.445991e-06  2.708347e-06
alpha -7.277789e-05  2.834394e+01  4.091235e+00 -1.297656e+00
rho   -8.445991e-06  4.091235e+00  1.056668e+00 -3.284805e-01
phi    2.708347e-06 -1.297656e+00 -3.284805e-01  1.021663e-01

$call
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms, 
    vrs = TRUE, method = "Kmenta")

$method
[1] "Kmenta"

$fitted.values
 [1] 6.825534e+32 3.017661e+34 2.137404e+36 1.125503e+35 1.125503e+35
 [6] 2.625256e+36 4.956137e+39 4.010225e+37 6.214657e+35 8.396901e+35
[11] 8.516523e+37 6.947415e+38 1.393095e+42 8.400157e+48 3.195394e+47
[16] 1.318337e+54 1.631878e+71          NaN          NaN          NaN

attr(,"class")
[1] "cesEst"
> print( cesLandLaborKmenta )
Estimated CES function

Call:
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms, 
    vrs = TRUE, method = "Kmenta")

Coefficients:
     gamma      alpha        rho        phi 
 1.315e-06  7.481e+00 -4.702e-02  1.656e+00 

> summary( cesLandLaborKmenta )
Estimated CES function with variable returns to scale

Call:
cesEst(yName = "qOutput", xNames = c("land", "qLabor"), data = germanFarms, 
    vrs = TRUE, method = "Kmenta")

Estimation method:  Kmenta 

Coefficients:
        Estimate Std. Error t value Pr(>|t|)    
gamma  1.315e-06  1.400e-05   0.094    0.925    
alpha  7.481e+00  5.324e+00   1.405    0.160    
rho   -4.702e-02  1.028e+00  -0.046    0.964    
phi    1.656e+00  3.196e-01   5.180 2.22e-07 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

> coef( cesLandLaborKmenta )
        gamma         alpha           rho           phi 
 1.314540e-06  7.480918e+00 -4.701592e-02  1.655682e+00 
> vcov( cesLandLaborKmenta )
              gamma         alpha           rho           phi
gamma  1.960017e-10 -7.277789e-05 -8.445991e-06  2.708347e-06
alpha -7.277789e-05  2.834394e+01  4.091235e+00 -1.297656e+00
rho   -8.445991e-06  4.091235e+00  1.056668e+00 -3.284805e-01
phi    2.708347e-06 -1.297656e+00 -3.284805e-01  1.021663e-01
> coef( summary( cesLandLaborKmenta ) )
           Estimate   Std. Error     t value     Pr(>|t|)
gamma  1.314540e-06 1.400006e-05  0.09389528 9.251923e-01
alpha  7.480918e+00 5.323903e+00  1.40515674 1.599747e-01
rho   -4.701592e-02 1.027944e+00 -0.04573784 9.635192e-01
phi    1.655682e+00 3.196346e-01  5.17992004 2.219810e-07
> 
> 
> ## CES: Land & Intermediate Inputs
> cesLandInt <- cesEst( "qOutput", c( "land", "qVarInput" ), germanFarms )
> print.default( cesLandInt )
$par
     gamma      alpha        rho 
39.8571749  0.6649561 -1.9327816 

$value
[1] 166073.7

$counts
function gradient 
      92       NA 

$convergence
[1] 0

$message
NULL

$hessian
            gamma    alpha        rho
gamma    52409.08 -1621376   223791.2
alpha -1621376.31 50213665 -6953893.1
rho     223791.21 -6953893   965838.5

$vcov
      gamma alpha rho
gamma    NA    NA  NA
alpha    NA    NA  NA
rho      NA    NA  NA

$call
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms)

$method
[1] "Nelder-Mead"

$fitted.values
 [1] 1151.224 1190.648 1214.734 1225.634 1225.623 1241.369 1274.824 1277.726
 [9] 1238.881 1282.642 1317.114 1469.637 1530.662 1583.740 1550.679 1568.322
[17] 1649.820 1724.479 1835.089 1937.386

attr(,"class")
[1] "cesEst" "list"  
> print( cesLandInt )
Estimated CES function

Call:
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms)

Coefficients:
 gamma  alpha    rho 
39.857  0.665 -1.933 

> summary( cesLandInt )
Estimated CES function with constant returns to scale

Call:
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms)

Estimation method:  Nelder-Mead 

Coefficients:
      Estimate Std. Error t value Pr(>|t|)
gamma   39.857         NA      NA       NA
alpha    0.665         NA      NA       NA
rho     -1.933         NA      NA       NA

> coef( summary( cesLandInt ) )
        Estimate Std. Error t value Pr(>|t|)
gamma 39.8571749         NA      NA       NA
alpha  0.6649561         NA      NA       NA
rho   -1.9327816         NA      NA       NA
> 
> # variable returns to scale
> cesLandIntVrs <- cesEst( "qOutput", c( "land", "qVarInput" ), germanFarms,
+    vrs = TRUE )
> print.default( cesLandIntVrs )
$par
    gamma     alpha       rho       phi 
37.492672  1.319760 -0.983313  1.173182 

$value
[1] 104671.2

$counts
function gradient 
     233       NA 

$convergence
[1] 0

$message
NULL

$hessian
            gamma      alpha         rho        phi
gamma    59345.55   -1943323   -626335.3    6998875
alpha -1943322.55   63619491  20405476.5 -228918432
rho    -626335.30   20405477   6566019.3  -73735641
phi    6998875.38 -228918432 -73735640.8  826624532

$vcov
      gamma alpha rho phi
gamma    NA    NA  NA  NA
alpha    NA    NA  NA  NA
rho      NA    NA  NA  NA
phi      NA    NA  NA  NA

$call
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms, 
    vrs = TRUE)

$method
[1] "Nelder-Mead"

$fitted.values
 [1] 1101.843 1145.418 1172.931 1184.296 1184.430 1202.278 1240.408 1244.386
 [9] 1199.826 1250.054 1289.143 1465.994 1537.447 1600.988 1563.111 1584.837
[17] 1683.872 1774.869 1909.843 2035.424

attr(,"class")
[1] "cesEst" "list"  
> print( cesLandIntVrs )
Estimated CES function

Call:
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms, 
    vrs = TRUE)

Coefficients:
  gamma   alpha     rho     phi 
37.4927  1.3198 -0.9833  1.1732 

> summary( cesLandIntVrs )
Estimated CES function with variable returns to scale

Call:
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms, 
    vrs = TRUE)

Estimation method:  Nelder-Mead 

Coefficients:
      Estimate Std. Error t value Pr(>|t|)
gamma  37.4927         NA      NA       NA
alpha   1.3198         NA      NA       NA
rho    -0.9833         NA      NA       NA
phi     1.1732         NA      NA       NA

> coef( summary( cesLandIntVrs ) )
       Estimate Std. Error t value Pr(>|t|)
gamma 37.492672         NA      NA       NA
alpha  1.319760         NA      NA       NA
rho   -0.983313         NA      NA       NA
phi    1.173182         NA      NA       NA
> 
> # using the BFGS optimization method
> cesLandIntBfgs <- cesEst( "qOutput", c( "land", "qVarInput" ), germanFarms,
+    method = "BFGS" )
> print.default( cesLandIntBfgs )
$par
    gamma     alpha       rho 
 55.44507 336.65007 -48.22737 

$value
[1] 165832.4

$counts
function gradient 
      50       11 

$convergence
[1] 0

$message
NULL

$hessian
           gamma       alpha         rho
gamma 27024.8177 -92.2898068 -3748.78503
alpha   -92.2898   0.3151814    12.80202
rho   -3748.7850  12.8020166   520.01085

$vcov
      gamma alpha rho
gamma    NA    NA  NA
alpha    NA    NA  NA
rho      NA    NA  NA

$call
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms, 
    method = "BFGS")

$method
[1] "BFGS"

$fitted.values
 [1] 1149.946 1189.260 1213.340 1224.152 1224.152 1239.878 1273.295 1276.243
 [9] 1237.420 1281.158 1315.558 1467.901 1528.838 1581.913 1548.987 1566.678
[17] 1648.256 1722.953 1833.525 1935.742

attr(,"class")
[1] "cesEst" "list"  
> print( cesLandIntBfgs )
Estimated CES function

Call:
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms, 
    method = "BFGS")

Coefficients:
 gamma  alpha    rho 
 55.45 336.65 -48.23 

> summary( cesLandIntBfgs )
Estimated CES function with constant returns to scale

Call:
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms, 
    method = "BFGS")

Estimation method:  BFGS 

Coefficients:
      Estimate Std. Error t value Pr(>|t|)
gamma    55.45         NA      NA       NA
alpha   336.65         NA      NA       NA
rho     -48.23         NA      NA       NA

> coef( summary( cesLandIntBfgs ) )
       Estimate Std. Error t value Pr(>|t|)
gamma  55.44507         NA      NA       NA
alpha 336.65007         NA      NA       NA
rho   -48.22737         NA      NA       NA
> 
> # using the L-BFGS-B optimization method with constrained alpha
> cesLandIntBfgsCon <- cesEst( "qOutput", c( "land", "qVarInput" ), germanFarms,
+    method = "L-BFGS-B", lower = c( -Inf, 0, -Inf ),
+    upper = c( Inf, 1, Inf ) )
> print.default( cesLandIntBfgsCon )
$par
     gamma      alpha        rho 
37.6785181  0.2645720 -5.0053076 

$value
[1] 165832.4

$counts
function gradient 
     128      128 

$convergence
[1] 1

$message
[1] "NEW_X"

$hessian
            gamma    alpha        rho
gamma    58519.81 -1665042   117022.3
alpha -1665042.26 47376621 -3329644.9
rho     117022.32 -3329645   234015.5

$vcov
             gamma        alpha          rho
gamma  0.800330467 0.0070796916 -0.299483041
alpha  0.007079692 0.0007763862  0.007506377
rho   -0.299483041 0.0075063773  0.256567513

$call
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms, 
    method = "L-BFGS-B", lower = c(-Inf, 0, -Inf), upper = c(Inf, 
        1, Inf))

$method
[1] "L-BFGS-B"

$fitted.values
 [1] 1149.949 1189.263 1213.343 1224.155 1224.155 1239.880 1273.298 1276.246
 [9] 1237.423 1281.161 1315.561 1467.904 1528.842 1581.916 1548.991 1566.682
[17] 1648.259 1722.957 1833.529 1935.746

attr(,"class")
[1] "cesEst" "list"  
> print( cesLandIntBfgsCon )
Estimated CES function

Call:
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms, 
    method = "L-BFGS-B", lower = c(-Inf, 0, -Inf), upper = c(Inf, 
        1, Inf))

Coefficients:
  gamma   alpha     rho 
37.6785  0.2646 -5.0053 

> summary( cesLandIntBfgsCon )
Estimated CES function with constant returns to scale

Call:
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms, 
    method = "L-BFGS-B", lower = c(-Inf, 0, -Inf), upper = c(Inf, 
        1, Inf))

Estimation method:  L-BFGS-B 

Coefficients:
      Estimate Std. Error t value Pr(>|t|)    
gamma 37.67852    0.89461  42.117   <2e-16 ***
alpha  0.26457    0.02786   9.495   <2e-16 ***
rho   -5.00531    0.50652  -9.882   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

> coef( summary( cesLandIntBfgsCon ) )
        Estimate Std. Error   t value     Pr(>|t|)
gamma 37.6785181 0.89461191 42.117166 0.000000e+00
alpha  0.2645720 0.02786371  9.495217 2.197522e-21
rho   -5.0053076 0.50652494 -9.881661 4.999730e-23
> 
> # Kmenta approximation
> cesLandIntKmenta <- cesEst( "qOutput", c( "land", "qVarInput" ), germanFarms,
+    method = "Kmenta" )
Warning message:
In cesEst("qOutput", c("land", "qVarInput"), germanFarms, method = "Kmenta") :
  allowing for variable returns to scale in the Kmanta approximation although argument 'vrs' is 'FALSE'.
> print.default( cesLandIntKmenta )
$translogUnr
Estimated Translog function with 20 observations.
         a_0          a_1          a_2        b_1_1        b_1_2        b_2_2 
-110.3756140   -0.9209255   35.4144570   -2.5638577    1.6354298   -6.1874110 

$test
Linear hypothesis test

Hypothesis:
b_1_1 + b_1_2 = 0
b_1_2 + b_2_2 = 0

Model 1: y ~ 1 + a_1 + a_2 + b_1_1 + b_1_2 + b_2_2
Model 2: restricted model

  Res.Df      RSS Df Sum of Sq      F  Pr(>F)  
1     14 0.017794                              
2     16 0.032596 -2 -0.014802 5.8227 0.01445 *
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

$translog

systemfit results 
method: OLS 

Coefficients:
eq1_(Intercept)         eq1_a_1         eq1_a_2       eq1_b_1_1       eq1_b_1_2 
      -5.249321       -1.918903        3.616583       -0.930653        0.930653 
      eq1_b_2_2 
      -0.930653 

$par
       gamma        alpha          rho          phi 
 0.005251082 -1.130309435 -0.227662809  1.697679744 

$vcov
             gamma      alpha         rho          phi
gamma  0.006287789  0.4447299  0.04356957 -0.002344101
alpha  0.444729932 31.5957949  3.02153597 -0.124590619
rho    0.043569573  3.0215360  0.32935388 -0.034664500
phi   -0.002344101 -0.1245906 -0.03466450  0.013322562

$call
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms, 
    method = "Kmenta", vrs = TRUE)

$method
[1] "Kmenta"

$fitted.values
 [1] NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN
[20] NaN

attr(,"class")
[1] "cesEst"
> print( cesLandIntKmenta )
Estimated CES function

Call:
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms, 
    method = "Kmenta", vrs = TRUE)

Coefficients:
    gamma     alpha       rho       phi 
 0.005251 -1.130309 -0.227663  1.697680 

> summary( cesLandIntKmenta )
Estimated CES function with variable returns to scale

Call:
cesEst(yName = "qOutput", xNames = c("land", "qVarInput"), data = germanFarms, 
    method = "Kmenta", vrs = TRUE)

Estimation method:  Kmenta 

Coefficients:
       Estimate Std. Error t value Pr(>|t|)    
gamma  0.005251   0.079296   0.066    0.947    
alpha -1.130309   5.621014  -0.201    0.841    
rho   -0.227663   0.573894  -0.397    0.692    
phi    1.697680   0.115423  14.708   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

> coef( summary( cesLandIntKmenta ) )
          Estimate Std. Error     t value     Pr(>|t|)
gamma  0.005251082 0.07929558  0.06622162 9.472014e-01
alpha -1.130309435 5.62101369 -0.20108640 8.406310e-01
rho   -0.227662809 0.57389361 -0.39669863 6.915897e-01
phi    1.697679744 0.11542340 14.70828018 5.703867e-49
> 
> 
> ############  cesCalc  ################
> outLandLabor <- cesCalc( c( "land", "qLabor" ), germanFarms,
+    coef( cesLandLabor ) )
> print( outLandLabor )
 [1] 1149.886 1189.199 1213.277 1224.088 1224.088 1239.813 1273.229 1276.177
 [9] 1237.356 1281.091 1315.490 1467.825 1528.759 1581.831 1548.907 1566.597
[17] 1648.170 1722.864 1833.430 1935.642
> all.equal( outLandLabor, cesCalc( c( "land", "qLabor" ), germanFarms,
+    coef( cesLandLabor )[ c( 2, 3, 1 ) ] ) )
[1] TRUE
> all.equal( outLandLabor, cesCalc( c( "land", "qLabor" ), germanFarms,
+    unname( coef( cesLandLabor ) ) ) )
[1] TRUE
> 
> outLandLaborVrs <- cesCalc( c( "land", "qLabor" ), germanFarms,
+    coef( cesLandLaborVrs ) )
> print( outLandLaborVrs )
 [1] 1080.203 1126.396 1154.876 1167.708 1167.708 1186.423 1226.386 1229.924
 [9] 1183.495 1235.826 1277.296 1464.090 1540.181 1607.065 1565.507 1587.810
[17] 1691.447 1787.457 1931.456 2066.489
> all.equal( outLandLaborVrs, cesCalc( c( "land", "qLabor" ), germanFarms,
+    coef( cesLandLaborVrs )[ c( 3, 1, 4, 2 ) ] ) )
[1] TRUE
> all.equal( outLandLaborVrs, cesCalc( c( "land", "qLabor" ), germanFarms,
+    unname( coef( cesLandLaborVrs ) ) ) )
[1] TRUE
> 

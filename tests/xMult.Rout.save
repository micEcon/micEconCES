
R version 2.14.1 (2011-12-22)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i686-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # load the micEconCES package
> library( micEconCES )
Loading required package: systemfit
Loading required package: Matrix
Loading required package: lattice

Attaching package: 'Matrix'

The following object(s) are masked from 'package:base':

    det

Loading required package: car
Loading required package: MASS
Loading required package: nnet
Loading required package: lmtest
Loading required package: zoo

Attaching package: 'zoo'

The following object(s) are masked from 'package:base':

    as.Date, as.Date.numeric

Loading required package: miscTools
Loading required package: micEcon
Loading required package: minpack.lm
Loading required package: DEoptim

DEoptim package
Differential Evolution algorithm in R
Authors: D. Ardia, K. Mullen, B. Peterson and J. Ulrich

> 
> # seed for random number generation
> set.seed( 123 )
> 
> # number of observations
> nObs <- 200
> 
> # number of explanatory variables
> nExog <- 4
> 
> # create data set
> cesData <- data.frame( obsNo = 1:nObs )
> 
> # names of explanatory variables
> xxNames <- paste( "xx", 1:nExog, sep = "." )
> 
> # add explanatory variables
> for( i in 1:nExog ) {
+    cesData[[ xxNames[ i ] ]] <- rchisq( nObs, 10 + i )
+ }
> cesData$time <- c( 0:( nObs - 1 ) )
> 
> # coefficients
> cesCoef <- c( 1, 1:nExog / sum( 1:nExog ), 0.5, 1.1 )
> names( cesCoef ) <- c( "gamma", paste( "delta", 1:nExog, sep = "_" ),
+    "rho", "nu" )
> cesCoefTc <- c( cesCoef[ 1 ], lambda = 0.015, cesCoef[ -1 ] )
> 
> # calculate deterministic endogenous variable
> cesData$y <- cesCalc( xNames = xxNames, data = cesData, coef = cesCoef )
> print( cesData$y )
  [1] 14.848625 11.970421 10.739203 14.883620 15.535230 14.935229 20.806368
  [8]  9.803082 26.787754 10.649418 15.971223 13.427501 11.335151 23.384630
 [15] 20.153760  9.887757 14.453192 15.376441 11.971869 17.526705 14.975446
 [22] 12.051767 10.220882 15.429930 10.425045 14.465145 11.691491 17.604464
 [29] 17.819062 21.031560 16.711011 10.057375 18.457676 21.891074 18.073391
 [36]  8.757554 14.209666 13.079591 19.412187 12.223466 11.437076 16.957713
 [43] 14.784928 10.816139 11.027034 17.393049 16.193970 18.017309 13.042017
 [50] 20.320752 13.982932 16.004740 16.744459  8.726522 19.763878 15.953272
 [57] 15.028901 10.351853 22.218991 10.839558 12.296094 11.631039 13.481794
 [64] 19.410561 11.855219 15.653113 15.105207 16.242316 12.958878  9.700794
 [71] 18.526227 16.155976 18.826507 17.951994 30.003852 12.229179 25.096224
 [78] 20.972230 13.546812 29.683889 12.266724  9.490848 15.909421 13.242661
 [85] 16.481238  6.001391 11.115496 15.300235 11.814082 12.623937  9.815252
 [92] 17.946849 11.391715 17.157999 13.940245 16.183382 13.379635 14.863752
 [99] 11.931794 19.585063 15.159031 16.290298 14.468932 15.484081 14.354868
[106] 13.803116 18.405815 15.127372 14.512234 12.261568 11.956427 14.647894
[113] 24.522309 16.892534 15.826469 19.702755 14.507567 13.100091 16.694070
[120] 17.007131 15.300592  9.036645 14.872371 13.971230 19.034836 19.762580
[127] 14.631902 10.077768 13.303489 15.562162 19.863503 17.236683 15.176831
[134] 15.135941 20.189160 12.178079  9.147706 15.732710 15.181915 14.943310
[141]  8.372290 18.006622  8.071935 13.248692 22.279142 12.080192 15.645794
[148] 15.287438 19.000706 15.664670 14.865792 21.506374 21.096809 14.693976
[155] 12.419261 22.138850 12.155290  9.875017 17.181010 11.936055 19.268107
[162] 10.798626 16.170179 16.644418 12.565766 19.950484 10.721659 10.388963
[169] 17.103158 12.290792 11.873107 18.443930 17.082243 10.606307 18.549608
[176] 15.315191 13.921089 10.146345 12.113064 17.555870 17.094181 25.114687
[183] 14.429032 13.639015 14.299852 12.346822 14.915680 11.166134 16.037850
[190] 16.073649 11.704216 12.477803 16.153751 10.515336 15.074299  8.249979
[197] 16.114151 16.567942 19.777939 19.727936
> # check if removing the names of the coefficients makes a difference
> all.equal( cesData$y,
+    cesCalc( xNames = xxNames, data = cesData, coef = unname( cesCoef ) ) )
[1] TRUE
> # check if permuting the coefficients makes a difference
> all.equal( cesData$y,
+    cesCalc( xNames = xxNames, data = cesData, coef = sample( cesCoef, 7 ) ) )
[1] TRUE
> 
> # deterministic dependent variable with technological change
> cesData$yTc <- cesCalc( xNames = xxNames, tName = "time", data = cesData, 
+    coef = cesCoefTc )
> print( cesData$yTc )
  [1]  14.84863  12.15133  11.06626  15.56868  16.49588  16.09845  22.76579
  [8]  10.88839  30.20311  12.18865  18.55591  15.83630  13.57064  28.41960
 [15]  24.86325  12.38266  18.37361  19.84271  15.68272  23.30635  20.21474
 [22]  16.51405  14.21692  21.78691  14.94252  21.04666  17.26811  26.39442
 [29]  27.11993  32.49298  26.20808  16.01148  29.82898  35.91227  30.09746
 [36]  14.80428  24.38388  22.78388  34.32593  21.94101  20.83971  31.36594
 [43]  27.76034  20.61542  21.33502  34.16052  32.28617  36.46427  26.79395
 [50]  42.37856  29.60187  34.39410  36.52757  19.32437  44.42738  36.40346
 [57]  34.81245  24.34108  53.03475  26.26408  30.24351  29.04009  34.16973
 [64]  49.93975  30.96223  41.49902  40.65166  44.37250  35.93749  27.30876
 [71]  52.94149  46.86589  55.43803  53.66179  91.04244  37.66852  78.47008
 [78]  66.56635  43.64773  97.08671  40.72696  31.98695  54.42978  45.99090
 [85]  58.10331  21.47719  40.38022  56.42251  44.22509  47.97091  37.86161
 [92]  70.27489  45.28095  69.23209  57.09862  67.28820  56.47137  63.68350
 [99]  51.89418  86.46738  67.93806  74.11143  66.82009  72.58893  68.31225
[106]  66.67929  90.25749  75.30194  73.33163  62.89520  62.25688  77.42398
[113] 131.57582  92.00765  87.50394 110.58213  82.65459  75.76369  98.00844
[120] 101.35536  92.56319  55.49473  92.71267  88.41134 122.27478 128.86821
[127]  96.85395  67.71663  90.74255 107.75310 139.61436 122.98223 109.92189
[134] 111.28251 150.67811  92.26248  70.35143 122.82271 120.31399 120.21283
[141]  68.36955 149.26744  67.92426 113.17087 193.18551 106.33209 139.79850
[148] 138.66091 174.94579 146.40955 141.04270 207.13057 206.25676 145.82943
[155] 125.11691 226.40694 126.18694 104.06420 183.79200 129.61437 212.39574
[162] 120.83415 183.67516 191.91929 147.07992 237.04580 129.31689 127.19789
[169] 212.56825 155.06593 152.06012 239.78324 225.43673 142.08832 252.25706
[176] 211.41969 195.07906 144.33161 174.91227 257.33747 254.35683 379.34756
[183] 221.23872 212.28600 225.93542 198.02607 242.84248 184.54354 269.06461
[190] 273.74068 202.33993 218.97364 287.76733 190.15410 276.71587 153.73197
[197] 304.81280 318.13302 385.51000 390.34685
> all.equal( cesData$yTc, 
+    cesData$y * exp( cesCoefTc[ "lambda" ] * c( 0:( nObs - 1 ) ) ) )
[1] TRUE
> # check if removing the names of the coefficients makes a difference
> all.equal( cesData$yTc,
+    cesCalc( xNames = xxNames, tName = "time", data = cesData, 
+       coef = unname( cesCoefTc ) ) )
[1] TRUE
> # check if permuting the coefficients makes a difference
> all.equal( cesData$yTc,
+    cesCalc( xNames = xxNames, tName = "time", data = cesData, 
+       coef = sample( cesCoefTc, 8 ) ) )
[1] TRUE
> 
> 
> # adding noise to the endogenous variable
> cesData$y <- cesData$y + rnorm( nObs )
> 
